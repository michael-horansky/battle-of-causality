-----------------------------------------------------------------------------
          _____       _      _                 _    
         |  __ \     | |    | |               | |   
         | |__) |   _| | ___| |__   ___   ___ | | __
         |  _  / | | | |/ _ \ '_ \ / _ \ / _ \| |/ /
         | | \ \ |_| | |  __/ |_) | (_) | (_) |   < 
         |_|  \_\__,_|_|\___|_.__/ \___/ \___/|_|\_\
                                                    
-----------------------------------------------------------------------------


1 Goal and scope of the game
    1.1 Win conditions
    1.2 Causal freedom
2 Gameplay
    2.1 Setup
    2.2 Game loop
        2.2.1 Placing flags
        2.2.2 Resolving flags - movement
3 Dictionary
    3.1 Basic terms
    3.2 Flag types
    3.3 TUI elements


- time travel notes
    -FLAG REMOVAL: It would seem that if a stone is disturbed, its future flags which do not get activated do not matter and should be removed, so they cannot activate by accident.
                   However, they are still important for selecting causally consistent scenarios, as the disturbing event may be removed.
                   POSSIBLE SOLUTION: Flags tied to a specific scenario? (more specifically, to a list of activated TJIs in which the flags matter. These should be TJIs whose stones
                   already reached t_max/time-jump-out.)
    -Immediate paradoxes: They shouldn't be a thing. More generally, a newly added TJI only adds the stone for one single time-slice (since it must be causally free there), and as such
                          shouldn't count for that round's causal selection (or flag deactivation, if we implement that). DONE
    -Paradox resolution: We will alow the Gamemaster to not only deactivate TJIs, but also remove stones which spawn with load_board if paradox is reached. This is good from a game
                         design perspective, since it lightly punishes players which engage in paradox tomfoolery.
                         (e.g.: Try scenario selection normally. If paradox is reached, then track all the stones associated with the unresolvable timejumps, find their ur-ancestors, and
                         try removing them in some specified order. Prioritise 1. removing a smaller number of ur-ancestors; 2. removing ur-ancestors with a smaller number of children
                         (because the philosophy is to affect the game less).
The philosophy is: "Every timejump should get its chance to prove itself!"




POZNAMKA:
flags are executed in the order movement & placement - attacks
in between of these two things the conflict resolution takes place

POZNAMKA:
TJIs added in this round shouldnt be considered when choosing causally consistent scenarios at the end of the round and should be forced inactive during choosing and then flipped active
THis is because these TJIs dont do anything yet, just place a causally free stone on the board.
BOMBARDIER's attacks are of course an exception




2.2.2 Resolving flags - movement

The game disallows the following board configurations to occur at the beginning of a round:

    -A stone occupies an unavailable square (e.g. a wall)
    -More than one stone occupy the same square

The game avoids these configurations in two ways

    -'Soft' prevention: The game will not allow a player to place a flag which would move a stone into a permanent, static obstacle (i.e. an unavailable square). Instead, the player would be encouraged to place the "wait" flag.
    -'Hard' prevention: After executing all flags, the game runs a conflict resolution routine, which moves the stones into an allowed configuration following a set of rules as outlined below.

The conflict resolution routine represents the physicality of the stones. Even though the routine may revert the spatial movement of a stone, note that if the stone also changed its azimuth, this azimuth change does not revert. Its core philosophy is that the stones are "sokoban-like", and hence can be pushed by non-opposing movement of other stones. The rules for conflict resolution are applied in order as follows:

    1. 'Sokoban push': For every square occupied by exactly two stones, if one of these stones occupied the same square in the previous time-slice, it will be pushed in the direction of the other stone's approach. This will not occur if
           1.1. the other stone did not move onto this square from the previous time-slice spatially, but rather was placed here, e.g. through a time-jump-in, or
           1.2. the square onto which the stone would be pushed is unavailable or occupied (much like in Sokoban, one cannot push two stones with one move).
    2. 'Opposition': For every stone which is tagged as 'opposable', if it moved from position A to position B and there exists another opposable stone which moved from position B to position A, both stones are returned to their origin.
    3. 'Impasse': Now, for every square occupied by more than one stone, all the stones on this square which have NOT been placed on this square in this time-slice (i.e. they are present in the previous time-slice) are moved back to the square which they occupied in the previous time-slice, as well as the stones they pushed through the 'Sokoban push' rule. This rule chains, and is applied repeatedly until all stones which are still placed on squares which are occupied by more than one stone have already been moved by this rule.
    4. 'Explosion': Finally, for every square occupied by more than one stone, all stones on this square are deleted.

Notice the order of these rules. We see that sokoban pushes only happen to stones which have not moved between this and the previous time-slice, or were placed onto the board, but rather chose a waiting action, such as 'wait', 'rotate', 'attack' etc. Notably, two stones moving onto the same square, be it in opposing or perpendicular directions, are returned back onto their original squares due to the 'impasse' rule. This means that no stone has 'priority' in movement. Also, if a stone time-jumps-in at time t on the same square a stone moves onto from time-slice t-1, the spatial movement of the second stone is blocked. Hence, opening time portals are treated as momentary blockades. Finally, since the 'Sokoban push' rule doesn't apply if the waiting stone would be pushed onto an occupied square, this means that sokoban-like movement does have a lower priority than regular movement (you can think of this as the fact stones are "slowed down" by pushing a stone in front of them). For an example, see Fig. 1.

           Example 1                        Example 2
    -----------------------         -----------------------
       t = 1   |   t = 2               t = 1   |   t = 2   
               |                               |           
               |                               |       ^   
         A>    |     A>                A>A     |   A>A B   
           ^   |       ^                 v ^   |     v     
           B   |       B                   B   |           

    Fig. 1: In Example 1, both stones attempt to move forwards, forming an impasse and halting. In Example 2, however, the A-stone now also attempts to sokoban-push another A-stone (which is performing a waiting action), which does NOT result in an impasse, and the B-stone successfully moves, demonstrating the de facto priority unburdened movement has over sokoban pushing.


Note that, unlike the 'Sokoban push' rule, the second rule 'impasse' does chain. Thus, if multiple moving stones form a 'promenade', each moving onto the previous stone's square of origin, a single 'impasse' event at the front blocks all of this movement, halting the promenade.

The third rule specifically addresses situations which arise from placing stones into a time-slice, specifically through time-jumps-in. If a stone at time t-1 chooses to wait and is present on the same square at time t, and another stone time-jumps-in onto the same square at time t, both of these stones are removed. This is treated as two deaths (presumably via an unsightly explosion). This means that time-jumps-in may override Sokoban pushes by creating an additional impasse (see example in Fig. 2)

            Round 1                         Round 2
    -----------------------         -----------------------
       t = 1   |   t = 2               t = 1   |   t = 2   
               |                               |           
         ^     |   ^   ^                 ^     |           
       A>B     |   A A>B               A>B     |   A>      
       ^       |                       ^       |   ^       
       A       |                       A       |   A       

    Fig. 2: In the first round, both A-stones move forward, whilst the B-stone chooses to wait. As a result, the B-stone is pushed away. In the second round, the identical scenario plays out, except that a stone (the faction is unimportant) chooses to time-jump-in at time t = 2 onto the square occupied by the B-stone at time t = 1. As a result of a time-jump-in onto the waiting B-stone, both stones explode and are removed. The time jump still creates an impasse which blocks the movement of both A-stones. The game resolves this scenario as follows: 1. The A-stones move forward and the time-jumping stone is placed onto the B-stone square from t = 1; 2. A Sokoban push is rejected, as the disputed square is occupied by more than two stones; 3. An impasse reverts the moves of both A-stones; 4. An explosion occurs, destroying both the B-stone and the time-jumping stone.
                                    

3 Dictionary

The following is a comprehensive explanation of terms used in the Rulebook, as well as the Text User Interface.

3.1
    -'Time-cap' is the maximal value of time present on the board.
    -A 'time-slice' is a section of a board comprised of all of its squares at a specific time. The entire board is a collection of time-slices at time values progressing from 0 to the time-cap.
    -A time-slice is 'active' when players are prompted to place flags into it.

3.3 TUI elements

The board state is represented by a set of symbols:
    -'X' represents an impassable wall
    -' ' represents a free, unoccupied square
    -'A' and 'B' represent stones controlled by the first and second player, respectively
    -'^', '>', 'v', '<' in between the squares indicate the orientation of adjanced stones. 'X' placed in-between squares means that the two adjanced stones are facing each other.
A symbol in BOLD represents a stone which is causally free.
The active time-slice is highlighted in green.
The numbers in red label the y and x coordinates of each board square.
